<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1450684202279">{:repl-history {:ide [], :local [&quot;(ns ebc.util\n  (:require [ebc.consts :as c]\n            [clojure.string :as str]\n            [clojure.java.io :as io])\n  (:import (java.io File)\n           (java.util Date)\n           (java.text SimpleDateFormat Collator CollationKey)))&quot; &quot;(books \&quot;/Users/br/ESBDateien/eBooks/PolOec\&quot;)&quot; &quot;SB&quot; &quot;(time\n  (books \&quot;/Users/br/ESBDateien/eBooks/PolOec\&quot;)\n  )&quot; &quot;(time\n  (into [] (books \&quot;/Users/br/ESBDateien/eBooks/PolOec\&quot;))\n  )&quot; &quot;(defn books'\n  ([basedir]\n   (books' basedir (constantly true)))\n  ([basedir pred]\n   (let [xf1 (filter pred)\n         xf2 (filter #(ebc-pname? (trim-path (norm-path (.getPath ^File %)) basedir)))\n         xm  (map #(file-&gt;book % basedir))\n         xf (comp xf1 xf2 xm)]\n     (sequence xf (file-seq (io/file basedir))))))&quot; &quot;(time\n  (into [] (books' \&quot;/Users/br/ESBDateien/eBooks/MathInf\&quot;))\n  )&quot; &quot;(time\n  (into [] (books \&quot;/Users/br/ESBDateien/eBooks/MathInf\&quot;))\n  )&quot; &quot;(defn scats'\n  [basedir]\n  (let [xf1 (filter #(.isDirectory ^File %))\n        xf2 (filter #(re-matches (:scat c/ebc-pats)(.getName ^File %)))\n        xm  (map #(file-&gt;scat % basedir))\n        xf (comp xf1 xf2 xm)]\n    (sequence xf (file-seq (io/file basedir)))))&quot; &quot;(time\n  (into [] (scats \&quot;/Users/br/ESBDateien/eBooks/MathInf\&quot;))\n  )&quot; &quot;(time\n  (into [] (scats' \&quot;/Users/br/ESBDateien/eBooks/MathInf\&quot;))\n  )&quot; &quot;(ns ebc.index\n  (:require [ebc.consts :as c]\n            [ebc.util :refer :all]\n            [clojure.string :as str]\n            [clucy.core :as luc]\n            [clojure.java.io :as io]\n            [pantomime.exctract :as extract])\n  (:import\n    (java.io File)\n    (org.apache.lucene.analysis.standard StandardAnalyzer)\n    (org.apache.lucene.analysis.util CharArraySet)\n    (org.apache.lucene.util Version AttributeSource)\n    (org.apache.tika.parser Parser ParseContext)\n    (org.apache.tika.parser.epub EpubParser)\n    (org.apache.tika.parser.html HtmlParser)\n    (org.apache.tika.parser.txt TXTParser)\n    (org.apache.tika.metadata Metadata)\n    (org.apache.tika.sax BodyContentHandler)\n    (org.xml.sax SAXException)\n    (com.itextpdf.text.pdf PdfReader)\n    (com.itextpdf.text.pdf.parser PdfTextExtractor)))&quot; &quot;(ns ebc.index\n  (:require [ebc.consts :as c]\n            [ebc.util :refer :all]\n            [clojure.string :as str]\n            [clucy.core :as luc]\n            [clojure.java.io :as io]\n            [pantomime.extract :as extract])\n  (:import\n    (java.io File)\n    (org.apache.lucene.analysis.standard StandardAnalyzer)\n    (org.apache.lucene.analysis.util CharArraySet)\n    (org.apache.lucene.util Version AttributeSource)\n    (org.apache.tika.parser Parser ParseContext)\n    (org.apache.tika.parser.epub EpubParser)\n    (org.apache.tika.parser.html HtmlParser)\n    (org.apache.tika.parser.txt TXTParser)\n    (org.apache.tika.metadata Metadata)\n    (org.apache.tika.sax BodyContentHandler)\n    (org.xml.sax SAXException)\n    (com.itextpdf.text.pdf PdfReader)\n    (com.itextpdf.text.pdf.parser PdfTextExtractor)))&quot; &quot;(extract/parse \&quot;Users/br/ESBDateien/eBooks/MathInf/ec_01-Grundlagen/eb_Aho, Alfred V.+Ullman, Jeffrey D._Foundations - Solutions to Exercises.pdf\&quot;)&quot; &quot;(extract-pdf \&quot;/Users/br/ESBDateien/eBooks/MathInf/ec_01-Grundlagen/eb_Aho, Alfred V.+Ullman, Jeffrey D._Foundations - Solutions to Exercises.pdf\&quot;)&quot; &quot;(extract/parse \&quot;/Users/br/ESBDateien/eBooks/MathInf/ec_01-Grundlagen/eb_Aho, Alfred V.+Ullman, Jeffrey D._Foundations - Solutions to Exercises.pdf\&quot;)&quot; &quot;&quot;], :remote []}}</component>
</project>